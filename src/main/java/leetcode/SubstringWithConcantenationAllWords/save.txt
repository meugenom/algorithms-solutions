package dev.eugenem.leetcode.SubstringWithConcantenationAllWords;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

//hard

public class SubstringWithConcantenationAllWords {
    
    List<Integer> result = new ArrayList<>(); 
    List<String> usedWords = new ArrayList<>(); 
    
    String searchString ="";
    int searchIndex = 0;   
    String cash = "";
    int max_length_of_phrase = 0;
    
    
    public List<Integer> findSubstring(String s, String[] words) {

        for(int i=0; i < words.length; i++){
            max_length_of_phrase = max_length_of_phrase + words[i].length();
        }
        
        int number_Symbols = 0;                        
        while(number_Symbols < s.length()){ 
            searchString = searchString +  s.charAt(number_Symbols);                           
            this.findIndex(searchString, words);                 

            number_Symbols++;
        }
        return result;
    }

    
    public void findIndex(String s, String[] words){
        
        int index = 0, step = 0;        
        
        while(index < words.length){
                                    
            if(s.indexOf(words[index], step) == step){
                        
                if(!usedWords.contains(words[index])){            
                        if(s.indexOf(cash + words[index], 0) == 0){
                            
                            usedWords.add(words[index]);
                            cash = cash + words[index];
                            //! important                                                    
                            if(cash.length() < max_length_of_phrase){
                                step = cash.length();
                                index = -1; //restart when our step was changed                                                            
                            }                            
                        }                                                
                }                                            
            }               
            index++;
        }

        if(usedWords.size() == words.length){
            // full cash ...
            // need save word and index and cut the string
            // and clear cash array

            System.out.println("String found: " + cash);            
            
            result.add(searchIndex);
        
            // need to make left index and 
            searchIndex = searchIndex + usedWords.get(0).length();

            //substring searchString ...
            //searchString = searchString.substring(cash.length());
            String firstElem = usedWords.get(0);
            searchString = searchString.split(firstElem)[1];
            
            // remove cashes
            usedWords.clear();
            cash = "";

        }else{

            if(s.length() - step > 0
            && s.length() >= max_length_of_phrase){
                //remove part of ... from the head
                searchString = searchString.substring(1);
                searchIndex++;                
            }
            //if not ...need clear cash            
            usedWords.clear();
            cash = "";
        }

    }

    
    
    

    public static void main(String[] args){
        System.out.println("-----------------------------------------");        
        SubstringWithConcantenationAllWords o = new SubstringWithConcantenationAllWords();        
        String s = "abbaaccbbaaabbcc";
        String[] words = new String[3];
        words[0] = "aa";
        words[1] = "bb";
        words[2] = "cc";

        
        System.out.println("String: "+s);
        o.findSubstring(s, words);
        System.out.println(o.result);
        
    
        System.out.println("-----------------------------------------");
        
        String s2 = new String();
         s2= "pjzkrkevzztxductzzxmxsvwjkxpvukmfjywwetvfnujhweiybwvvsrfequzkhossmootkmyxgjgfordrpapjuun"+
         "mqnxxdrqrfgkrsjqbszgiqlcfnrpjlcwdrvbumtotzylshdvccdmsqoadfrpsvnwpizlwszrtyclhgilklydbmfhuywotjmktn"+
         "wrfvizvnmfvvqfiokkdprznnnjycttprkxpuykhmpchiksyucbmtabiqkisgbhxngmhezrrqvayfsxauamp"+
         "dpxtafniiwfvdufhtwajrbkxtjzqjnfocdhekumttuqwovfjrgulhekcpjszyynadxhnttgmnxkduqmmyhzfnjhducesct"+
         "ufqbumxbamalqudeibljgbspeotkgvddcwgxidaiqcvgwykhbysjzlzfbupkqunuqtraxrlptivshhbihtsigtpipguhbhctcvub"+
         "nhqipncyxfjebdnjyetnlnvmuxhzsdahkrscewabejifmxombiamxvauuitoltyymsarqcuuoezcbqpdaprxmsrickwpgwpsoplhugbik"+
         "bkotzrtqkscekkgwjycfnvwfgdzogjzjvpcvixnsqsxacfwndzvrwrycwxrcismdhqapoojegggkocyrdtkzmiekhxoppctytvphjynrhtc"+
         "vxcobxbcjjivtfjiwmduhzjokkbctweqtigwfhzorjlkpuuliaipbtfldinyetoybvugevwvhhhweejogrghllsouipabfafcxnhukcbtmxzsh"+
         "oyyufjhzadhrelweszbfgwpkzlwxkogyogutscvuhcllphshivnoteztpxsaoaacgxyaztuixhunrowzljqfqrahosheukhahhbiaxqzfmmwcjx"+
         "ountkevsvpbzjnilwpoermxrtlfroqoclexxisrdhvfsindffslyekrzwzqkpeocilatftymodgztjgybtyheqgcpwogdcjlnlesefgvimwbxcb"+
         "zvaibspdjnrpqtyeilkcspknyylbwndvkffmzuriilxagyerjptbgeqgebiaqnvdubrtxibhvakcyotkfonmseszhczapxdlauexehhaireihxs"+
         "plgdgmxfvaevrbadbwjbdrkfbbjjkgcztkcbwagtcnrtqryuqixtzhaakjlurnumzyovawrcjiwabuwretmdamfkxrgqgcdgbrdbnugzecbgyxxdqm"+
         "isaqcyjkqrntxqmdrczxbebemcblftxplafnyoxqimkhcykwamvdsxjezkpgdpvopddptdfbprjustquhlazkjfluxrzopqdstulybnqvyknrchbp"+
         "hcarknnhhovweaqawdyxsqsqahkepluypwrzjegqtdoxfgzdkydeoxvrfhxusrujnmjzqrrlxglcmkiykldbiasnhrjbjekystzilrwkzhontwmehrfs"+
         "rzfaqrbbxncphbzuuxeteshyrveamjsfiaharkcqxefghgceeixkdgkuboupxnwhnfigpkwnqdvzlydpidcljmflbccarbiegsmweklwngvygbqpe"+
         "scpeichmfidgsjmkvkofvkuehsmkkbocgejoiqcnafvuokelwuqsgkyoekaroptuvekfvmtxtqshcwsztkrzwrpabqrrhnlerxjojemcxel";
        String[] w2 = new String[18];
        w2[0] = "dhvf";
        w2[1] = "sind";
        w2[2] = "ffsl";
        w2[3] = "yekr";
        w2[4] = "zwzq";
        w2[5] = "kpeo";
        w2[6] = "cila";
        w2[7] = "tfty";
        w2[8] = "modg";
        w2[9] = "ztjg";
        w2[10] = "ybty";
        w2[11] = "heqg";
        w2[12] = "cpwo";
        w2[13] = "gdcj";
        w2[14] = "lnle";
        w2[15] = "sefg";
        w2[16] = "vimw";
        w2[17] = "bxcb";
         
         SubstringWithConcantenationAllWords l = new SubstringWithConcantenationAllWords();  
         l.findSubstring(s2, w2);
         System.out.println("String: "+s2);
         System.out.println(l.result);         

         System.out.println("-----------------------------------------");
         
        SubstringWithConcantenationAllWords k = new SubstringWithConcantenationAllWords();  
            String s1 = new String();
            s1="barfoofoobarthefoobarman";
            
            String[] w = new String[3];
            w[0] = "bar";
            w[1] = "foo";
            w[2] = "the";
            
            System.out.println("String: "+s1);
         k.findSubstring(s1, w);
         System.out.println(k.result);         

         System.out.println("-----------------------------------------");

         SubstringWithConcantenationAllWords g = new SubstringWithConcantenationAllWords();  
         String s3 = new String();
         s3="wordgoodgoodgoodbestword";
         

         String[] w3 = new String[4];
         w3[0] = "word";
         w3[1] = "good";
         w3[2] = "best";
         w3[3] = "good";
         
         System.out.println("String: "+s3);
      g.findSubstring(s3, w3);
      System.out.println(g.result);         
    }
}
